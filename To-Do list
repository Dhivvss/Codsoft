#include <iostream>
#include <vector>
#include <string>

struct Task {
    std::string description;
    bool completed;
};

// Function to add a task to the list
void addTask(std::vector<Task>& tasks, const std::string& description) {
    Task newTask = {description, false};
    tasks.push_back(newTask);
    std::cout << "Task added: " << description << std::endl;
}

// Function to view all tasks
void viewTasks(const std::vector<Task>& tasks) {
    std::cout << "Tasks:\n";
    for (size_t i = 0; i < tasks.size(); ++i) {
        std::cout << i + 1 << ". " << tasks[i].description << " - ";
        if (tasks[i].completed) {
            std::cout << "Completed";
        } else {
            std::cout << "Pending";
        }
        std::cout << std::endl;
    }
}

// Function to mark a task as completed
void markTaskCompleted(std::vector<Task>& tasks, int index) {
    if (index >= 1 && index <= tasks.size()) {
        tasks[index - 1].completed = true;
        std::cout << "Task marked as completed: " << tasks[index - 1].description << std::endl;
    } else {
        std::cout << "Invalid task index!\n";
    }
}

// Function to remove a task from the list
void removeTask(std::vector<Task>& tasks, int index) {
    if (index >= 1 && index <= tasks.size()) {
        std::cout << "Task removed: " << tasks[index - 1].description << std::endl;
        tasks.erase(tasks.begin() + index - 1);
    } else {
        std::cout << "Invalid task index!\n";
    }
}

int main() {
    std::vector<Task> tasks;
    int choice;

    std::cout << "Welcome to the To-Do List Manager!\n";

    while (true) {
        std::cout << "\nMenu:\n";
        std::cout << "1. Add Task\n";
        std::cout << "2. View Tasks\n";
        std::cout << "3. Mark Task as Completed\n";
        std::cout << "4. Remove Task\n";
        std::cout << "5. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        if (choice == 5) {
            std::cout << "Exiting...\n";
            break;
        }

        switch(choice) {
            case 1: {
                std::cin.ignore(); // Ignore previous newline character
                std::string taskDescription;
                std::cout << "Enter task description: ";
                std::getline(std::cin, taskDescription);
                addTask(tasks, taskDescription);
                break;
            }
            case 2:
                viewTasks(tasks);
                break;
            case 3: {
                int taskIndex;
                std::cout << "Enter the index of the task to mark as completed: ";
                std::cin >> taskIndex;
                markTaskCompleted(tasks, taskIndex);
                break;
            }
            case 4: {
                int taskIndex;
                std::cout << "Enter the index of the task to remove: ";
                std::cin >> taskIndex;
                removeTask(tasks, taskIndex);
                break;
            }
            default:
                std::cout << "Invalid choice! Please try again.\n";
        }
    }

    return 0;
}
