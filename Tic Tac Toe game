#include <iostream>
#include <vector>
#include <string>

// Function to display the game board
void displayBoard(const std::vector<std::vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row) {
            std::cout << cell << " ";
        }
        std::cout << std::endl;
    }
}

// Function to check if a player has won
bool checkWin(const std::vector<std::vector<char>>& board, char player) {
    // Check rows and columns
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) return true; // Rows
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) return true; // Columns
    }

    // Check diagonals
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) return true; // Diagonal \
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) return true; // Diagonal /

    return false;
}

// Function to check if the game is a draw
bool checkDraw(const std::vector<std::vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row) {
            if (cell == ' ') {
                return false; // If any cell is empty, the game is not a draw
            }
        }
    }
    return true; // All cells are filled, the game is a draw
}

int main() {
    std::vector<std::vector<char>> board(3, std::vector<char>(3, ' ')); // Initialize empty game board
    char currentPlayer = 'X'; // Player X starts the game

    std::cout << "Welcome to Tic-Tac-Toe!\n";

    while (true) {
        // Display the current state of the board
        std::cout << "Current board:\n";
        displayBoard(board);

        // Prompt the current player to enter their move
        int row, col;
        std::cout << "Player " << currentPlayer << ", enter your move (row and column): ";
        std::cin >> row >> col;

        // Update the board with the player's move
        if (row >= 1 && row <= 3 && col >= 1 && col <= 3 && board[row - 1][col - 1] == ' ') {
            board[row - 1][col - 1] = currentPlayer;
        } else {
            std::cout << "Invalid move! Please try again.\n";
            continue; // Invalid move, ask the player to try again
        }

        // Check if the current player has won
        if (checkWin(board, currentPlayer)) {
            std::cout << "Player " << currentPlayer << " wins!\n";
            break;
        }

        // Check if the game is a draw
        if (checkDraw(board)) {
            std::cout << "It's a draw!\n";
            break;
        }

        // Switch players
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    // Display the final state of the board
    std::cout << "Final board:\n";
    displayBoard(board);

    return 0;
}
